# utility functions for working with .not.mat files generated by evsonganaly.m
# that containing annotation of songs

from scipy.io import loadmat


def load_notmat(filename):
    """
    loads .not.mat files created by evsonganaly.m.
    wrapper around scipy.io.loadmat.
    Calls loadmat with squeeze_me=True to remove extra dimensions from arrays
    that loadmat parser sometimes adds.

    Argument
    --------
    filename : string, name of .not.mat file

    Returns
    -------
    notmat_dict : dictionary of variables from .not.mat files
    """

    if ".not.mat" in filename:
        pass
    elif filename[-4:] == "cbin":
        filename += ".not.mat"
    else:
        raise ValueError("Filename should have extension .cbin.not.mat or"
                         " .cbin")

    return loadmat(filename, squeeze_me=True)


def load_labels(data_dir, start_char='S', end_char='E'):
    """
    loads all 'labels' strings from .not.mat files into a list,
    to use for analyzing syntax.

    Parameter
    ---------
    data_dir : str
        name of directory in which to look for subdirectories containing .not.mat files
    start_char : str
        character appended to start of each 'labels' str, default is 'S'
    end_char : str
        character appended to end of each 'labels' str, default is 'E'

    Returns
    -------
    labels : list
        of str, all 'labels' loaded from the .not.mat files
    """

    notmats = []
    subdirs = glob(os.path.join(data_dir, '*/'))
    for subdir in subdirs:
        notmats.extend(glob(os.path.join(data_dir,
                                         subdir,
                                         '*.not.mat')))

    labels = []
    for notmat in notmats:
        labels.append(start_char + load_notmat(notmat)['labels'] + end_char)

    return labels


def uniquify_labels(labels):
    """determines set of unique characters in labels (as returned by load_labels)
    and the number of occurences of each unique character

    Parameters
    ----------
    labels : list
        of str

    Returns
    -------
    unique_labels : set
        of char, e.g. {'0','a','b','c'}
    counts : dict
        where keys are unique_labels and values are counts
        e.g. {'0': 100,
              'a': 200,
              'b': 250,
              'c': 150}
    """

    all_labels = ''.join(labels)
    unique_labels = set(all_labels)

    counts = dict(zip(unique_labels, [0] * len(unique_labels)))

    for label in all_labels:
        counts[label] += 1

    return unique_labels, counts